<?php
/**
 * @file
 * Code for the OMBU Media feature.
 */


include_once 'ombumedia.features.inc';
include_once 'ombumedia.field.inc';
include_once 'ombumedia.web.inc';


/**
 * Hooks.
 */

/**
 * Implements hook_menu().
 */
function ombumedia_menu() {
  $items['admin/dashboard/manage-media'] = array(
    'title' => 'Media',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'ombumedia_page_magage_media',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['admin/dashboard/manage-media/view'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/dashboard/manage-media/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'page callback' => 'ombumedia_page_magage_media_add',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
    'weight' => -5,
  );

  $items['admin/dashboard/select-media'] = array(
    'title' => 'Select Media',
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_select_media',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['admin/dashboard/ombumedia-test'] = array(
    'title' => 'Test media selection',
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_test',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['admin/ombumedia/ajax-upload'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_media_ajax_upload',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['file/%file/preview'] = array(
    'page callback' => 'ombumedia_page_file_preview',
    'page arguments' => array(1),
    'access callback' => 'file_entity_access',
    'access arguments' => array('view', 1),
    'file' => 'ombumedia.pages.inc',
  );

  $items['file/%file/configure'] = array(
    'page callback' => 'ombumedia_page_file_configure',
    'page arguments' => array(1),
    'access callback' => 'file_entity_access',
    'access arguments' => array('view', 1),
    'file' => 'ombumedia.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function ombumedia_admin_paths() {
  $paths = array(
    'file/*/preview' => TRUE,
    'file/*/configure' => TRUE,
    'admin/dashboard/manage-media' => TRUE,
    'admin/dashboard/manage-media/view' => TRUE,
    'admin/dashboard/manage-media/add' => TRUE,
    'admin/dashboard/select-media' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_theme().
 */
function ombumedia_theme($existing, $type, $theme, $path) {
  return array(
    'ombumedia_file_preview' => array(
      'variables' => array(
        'file' => NULL,
      ),
      'template' => 'ombumedia_file_preview',
    ),
    'ombumedia_dialog_page' => array(
      'render element' => 'page',
      'template' => 'ombumedia-dialog-page',
    ),
    'ombumedia_formatter_large_icon' => array(
      'variables' => array('file' => NULL, 'attributes' => array()),
    ),
  );
}

/**
 * Implements hook_library().
 */
function ombumedia_library() {
  $libraries = array();

  $path = drupal_get_path('module', 'ombumedia');

  $libraries['ombumedia'] = array(
    'title' => 'OMBU Media',
    'version' => '0.1',
    'js' => array(
      $path . '/js/ombumedia-util.js' => array(),
      $path . '/js/ombumedia.js' => array(),
      $path . '/js/ombumedia-popup.js' => array(),
      $path . '/js/ombumedia-preview.js' => array(),
      array(
        'type' => 'setting',
        'data' => array(
          'ombumedia' => array(
            'upload' => array(
              'url' => url('admin/ombumedia/ajax-upload'),
            ),
          ),
        ),
      ),
    ),
    'css' => array(
      $path . '/css/ombumedia.css',
    ),
    'dependencies' => array(
      array('system', 'ui.tabs'),
      array('system', 'ui.dialog'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_hook_info().
 */
function ombumedia_hook_info() {
  $hooks = array(
    'media_internet_providers',
  );

  return array_fill_keys($hooks, array('group' => 'media'));
}

/**
 * Implements hook_image_default_styles().
 */
function ombumedia_image_default_styles() {
  $styles = array();
  $styles['ombumedia_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 200, 'height' => 200),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_file_displays_alter().
 */
function ombumedia_file_displays_alter(&$displays, $file, $view_mode) {
  if ($view_mode == 'preview' && empty($displays)) {
    // We re in the media browser and this file has no formatters enabled.
    // Instead of letting it go through theme_file_link(), pass it through
    // theme_media_formatter_large_icon() to get our cool file icon instead.
    $displays['file_field_ombumedia_large_icon'] = array(
      'weight' => 0,
      'status' => 1,
      'settings' => NULL,
    );
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 * Provides legacy support for the "Large filetype icon" file field formatter.
 * This was originally used when media entities contained file fields. The
 * current file entity architecture no longer needs this, but people may
 * have used this formatter for other file fields on their website.
 *
 * @todo Some day, remove this.
 */
function ombumedia_field_formatter_info() {
  $formatters = array(
    'ombumedia_large_icon' => array(
      'label' => t('Large filetype icon'),
      'field types' => array('file'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 *
 * Legacy support for the "Large filetype icon" file field formatter.
 * @see media_field_formatter_info()
 */
function ombumedia_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'ombumedia_large_icon') {
    // Add height/width variable according to ombumedia_thumbnail image style
    // so that the output in media browser is consistent.
    // @todo is this the correct place to put this?
    $style = image_style_load('ombumedia_thumbnail');
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme' => 'ombumedia_formatter_large_icon',
        '#file' => (object) $item,
        '#attributes' => array(
          'width' => $style['effects'][0]['data']['width'],
          'height' => $style['effects'][0]['data']['height'],
        ),
      );
    }
  }

  return $element;
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function ombumedia_wysiwyg_plugin($editor, $version) {
  if ($editor == 'ckeditor') {
    return array(
      'ombumedia' => array(
        'path' => drupal_get_path('module', 'ombumedia') . '/js/ckeditor',
        'file' => 'plugin.js',
        'buttons' => array(
          'ombumedia' => t('OMBU Media'),
        ),
        'load' => TRUE,
      ),
    );
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function ombumedia_wysiwyg_editor_settings_alter(&$settings, &$context) {
  if ($context['profile']->editor == 'ckeditor') {
    // Ensure the ombumedia js is loaded.
    if (isset($context['profile']->settings['buttons']['ombumedia']['ombumedia'])) {
      drupal_add_library('ombumedia', 'ombumedia');
      // Add view_modes saved with the profile.
      $view_modes = array();
      foreach ($context['profile']->settings['ombumedia']['view_modes'] as $type => $modes) {
        $view_modes[$type] = array_values($modes);
      }
      drupal_add_js(array(
        'ombumedia' => array(
          'view_modes' => $view_modes,
        ),
      ), 'setting');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add settings for OMBU Media.
 */
function ombumedia_form_wysiwyg_profile_form_alter(&$form, &$form_state, $form_id) {
  $profile = $form_state['wysiwyg_profile'];
  if (isset($form['buttons']['ombumedia']['ombumedia'])) {
    $form['ombumedia'] = array(
      '#type' => 'fieldset',
      '#title' => t('OMBU Media'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      'view_modes' => array(),
    );

    $entity_info = entity_get_info('file');
    $types = array_keys($entity_info['bundles']);
    foreach ($types as $type) {
      $form['ombumedia']['view_modes'][$type] = array(
        '#title' => ucwords($type) . ' Styles',
        '#type' => 'select',
        '#multiple' => TRUE,
        '#options' => ombumedia_file_type_view_modes($type),
        '#default_value' => $profile->settings['ombumedia']['view_modes'][$type],
      );
    }
  }
}

/**
 * Implements hook_page_alter().
 *
 * This is used to use our alternate template when ?render=media-popup is passed
 * in the URL.
 */
function ombumedia_page_alter(&$page) {
  if (isset($_GET['render']) && $_GET['render'] == 'ombumedia-popup') {
    $page['#theme'] = 'ombumedia_dialog_page';

    // Disable administration modules from adding output to the popup.
    // @see http://drupal.org/node/914786
    module_invoke_all('suppress', TRUE);

    foreach (element_children($page) as $key) {
      if ($key != 'content') {
        unset($page[$key]);
      }
    }

    // Set up tabs and stash in $page['#tabs'] key.
    if (isset($page['content']['system_main']['tabs'])) {
      $messages_tab = reset(array_keys($page['content']['system_main']['tabs']));
      $page['#tabs'] = array();
      foreach($page['content']['system_main']['tabs'] as $tab_key => $tab) {
        $tab_content = drupal_render($tab);
        $page['#tabs'][$tab_key] = array(
          '#title' => $tab['#title'],
          '#markup' => $tab_content,
        );
        if (strstr($tab_content, 'error')) {
          $messages_tab = $tab_key;
        }
      }
      $page['#tabs']['#messages_tab'] = $messages_tab;
    }

  }
}


/**
 * Preprocess.
 */

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function ombumedia_preprocess_views_view_unformatted(&$variables) {
  if ($variables['view']->name === 'ombumedia') {
    $display = $variables['view']->current_display;
    $results = $variables['view']->result;
    foreach ($variables['rows'] as $i => $row) {
      // These use JS to add the correct query string so that the destination,
      // type filters and view modes are correct after AJAX filtering.
      $fid = $results[$i]->fid;
      $actions = array();
      if ($display === 'select_media') {
        $actions[] = l(t('Select'), 'file/' . $fid . '/configure', array(
          'attributes' => array('class' => 'ombumedia-button'),
        ));
      }
      if ($display === 'manage_media') {
        $file = file_load($fid);
        $query = drupal_get_destination();
        if (file_entity_access('update', $file)) {
          $actions[] = l(t('Edit'), 'file/' . $fid . '/edit', array(
            'query' => $query,
            'attributes' => array('class' => 'ombumedia-button'),
          ));
        }
        if (file_entity_access('delete', $file)) {
          $actions[] = l(t('Delete'), 'file/' . $fid . '/delete', array(
            'query' => $query,
            'attributes' => array('class' => 'ombumedia-button'),
          ));
        }
      }
      $actions_count = count($actions);
      $actions = '<ul class="actions actions-' . $actions_count . '"><li>' . implode('</li><li>', $actions) . '</li></ul>';
      $row = '<a class="launch-preview-popup" href="' . url('file/' . $fid . '/preview') . '">' . $row . '</a>';
      $variables['rows'][$i] = '<div class="views-row-inner">' . $row . $actions . '</div>';
      $variables['classes_array'][$i] .= ' ombumedia-library-file';
      $variables['classes_array'][$i] .= ' ombumedia-library-file-' . $display;
    }

  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function ombumedia_preprocess_views_view_fields(&$variables) {
  if ($variables['view']->name === 'ombumedia') {
    $fields =& $variables['fields'];
    $fields['rendered']->content = '<span class="field-content-wrapper">' . $fields['rendered']->content . '</span>';
  }
}

/**
 * Implements hook_preprocess_ombumedia_file_preview().
 */
function ombumedia_preprocess_ombumedia_file_preview(&$variables) {
  module_load_include('inc', 'file_entity', 'file_entity.pages');
  $file = $variables['file'];

  $variables['title'] = !empty($file->title) ? $file->title : $file->filename;

  $variables['preview'] = ombumedia_render_file_preview($file);

  $info_rows = array();
  foreach (ombumedia_file_get_info($file) as $info) {
    $info_rows[] = array(
      array('data' => $info['label'], 'header' => TRUE),
      $info['value'],
    );
  }

  $variables['info'] = array(
    '#theme' => 'fieldset',
    '#title' => t('Info'),
    '#attributes' => array(
      'class' => array('collapsible'),
    ),
    '#children' => theme('table', array('rows' => $info_rows)),
  );

  $variables['usage'] = array(
    '#theme' => 'fieldset',
    '#title' => t('Usage'),
    '#attributes' => array(
      'class' => array('collapsible', 'collapsed'),
    ),
    '#children' => render(file_entity_usage_page($file)),
  );

  drupal_add_library('system', 'drupal.collapse');
}

/**
 * Implements hook_preprocess_ombumedia_dialog_page().
 */
function ombumedia_preprocess_ombumedia_dialog_page(&$variables) {
  $variables['messages'] = theme('status_messages');
}


/**
 * Forms.
 */

/**
 * Form to upload a new file from the media select workflow.
 */
function ombumedia_file_entity_add($form, &$form_state, array $options = array(), $redirect = array('action' => 'edit', 'query' => array())) {
  module_load_include('inc', 'file_entity', 'file_entity.pages');

  $form['#redirect'] = $redirect;

  $form['upload'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload a new file'),
    '#upload_location' => file_entity_upload_destination_uri($options),
    '#upload_validators' => file_entity_get_upload_validators($options),
    '#progress_indicator' => 'bar',
    '#required' => TRUE,
    '#pre_render' => array('file_managed_file_pre_render', 'file_entity_upload_validators_pre_render'),
    '#default_value' => isset($form_state['storage']['upload']) ? $form_state['storage']['upload'] : NULL,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['next'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
    '#attributes' => array('class' => array('ombumedia-button')),
  );

  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');

  return $form;
}

function ombumedia_file_entity_add_validate($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);
  $type_candidates = file_entity_get_filetype_candidates($file);
  if (count($type_candidates) == 1) {
    $type_candidates_keys = array_keys($type_candidates);
    $form_state['type'] = reset($type_candidates_keys);
  }
  else {
    form_set_error('upload', t('The type of file uploaded was not recognized.'));
  }
}

function ombumedia_file_entity_add_submit($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);
  $type = $form_state['type'];

  $file->type = $type;
  $file->display = TRUE;
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);

  drupal_set_message(t('@type %name was uploaded.', array('@type' => file_entity_type_get_name($file), '%name' => $file->filename)));

  $redirect_path = 'file/' . $file->fid . '/' . $form['#redirect']['action'];
  $redirect_query = $form['#redirect']['query'];
  $form_state['redirect'] = array($redirect_path, array('query' => $redirect_query));
}

function ombumedia_file_entity_configure($form, &$form_state, $fid) {
  $file = file_load($fid);

  $form['#attributes'] = array(
    'class' => array('ombumedia-file-entity-configure'),
  );

  $view_mode_options = ombumedia_file_type_view_modes($file->type);
  if (isset($_GET['view_modes']) && isset($_GET['view_modes'][$file->type])) {
    $view_mode_options = array_intersect_key($view_mode_options, array_flip($_GET['view_modes'][$file->type]));
  }
  $view_mode = isset($_GET['view_mode']) ? $_GET['view_mode'] : array_keys($view_mode_options)[0];

  $form['view_mode'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => $view_mode_options,
    '#default_value' => $view_mode,
    '#ajax' => array(
      'callback' => 'ombumedia_file_entity_configure_preview_callback',
      'wrapper' => $preview_id,
    ),
  );

  $preview_id = 'ombumedia-configure-preview-' . $file->fid;
  $form['#preview_id'] = $preview_id;
  $form['preview'] = file_view_file($file, $view_mode);
  $form['preview']['#prefix'] = '<div id="' . $preview_id . '">';
  $form['preview']['#suffix'] = '</div>';

  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $file->fid,
  );

  $form['file'] = array(
    '#title' => t('Edit File'),
    '#description' => t('Changing these fields update them everwhere this file is used.'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'filename' => array(
      '#title' => t('Name'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $file->filename,
      '#weight' => -100,
    ),
  );

  $form['#file'] = $file;
  field_attach_form('file', $file, $form['file'], $form_state);

  unset($form['file']['redirect']);

  $form['actions'] = array(
    '#type' => 'actions',
    '#weight' => 30,
    'back' => array(
      '#markup' => l(t('Library'), 'admin/dashboard/select-media', array(
        'query' => drupal_get_query_parameters(),
        'attributes' => array('class' => 'ombumedia-button'),
      )),
    ),
    'continue' => array(
      '#value' => t('Use this @type', array('@type' => $file->type)),
      '#type' => 'submit',
      '#attributes' => array(
        'class' => array('ombumedia-button'),
      ),
    ),
  );

  return $form;
}

function ombumedia_file_entity_configure_preview_callback($form, &$form_state) {
  $preview_id = $form['#preview_id'];
  $file = file_load($form_state['values']['fid']);
  $view_mode = $form_state['values']['view_mode'];

  $rendered = '<div id="' . $preview_id . '">' . render(file_view_file($file, $view_mode)) . '</div>';

  $commands = array();
  $commands[] = ajax_command_replace('#' . $preview_id, $rendered);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function ombumedia_file_entity_configure_validate($form, &$form_state) {
  if (isset($form['file']['#entity'])) {
    // Fields were attached.
    $file = $form['file']['#entity'];
    field_attach_form_validate('file', $file, $form['file'], $form_state);
  }
}

function ombumedia_file_entity_configure_submit($form, &$form_state) {
  $file = $form['#file'];
  if (isset($form['file']['#entity'])) {
    // Fields were attached.
    field_attach_submit('file', $file, $form['file'], $form_state);
  }
  $file->filename = $form_state['values']['filename'];
  file_save($file);

  $return = array(
    'fid' => $file->fid,
    'view_mode' => $form_state['values']['view_mode'],
  );
  $return_json = drupal_json_encode($return);

  print <<<JS
<script type="text/javascript">
  try {
    window.parent.Drupal.ombumedia._popupCallback($return_json);
  }
  catch (e) {}
</script>
JS;
  drupal_exit();
}


/**
 * Theme.
 */

/**
 * Field formatter for displaying a file as a large icon.
 */
function theme_ombumedia_formatter_large_icon($variables) {
  $file = $variables['file'];
  $icon_dir = drupal_get_path('module', 'ombumedia') . '/icons';
  $icon = file_icon_path($file, $icon_dir);
  $variables['path'] = $icon;
  // theme_image() requires the 'alt' attribute passed as its own variable.
  // @see http://drupal.org/node/999338
  if (!isset($variables['alt']) && isset($variables['attributes']['alt'])) {
    $variables['alt'] = $variables['attributes']['alt'];
  }
  return theme('image', $variables);
}


/**
 * Helpers.
 */

/**
 * Returns an associative array with the view modes that are enabled for a file
 * type.
 */
function ombumedia_file_type_view_modes($type) {
  $entity_info = entity_get_info('file');
  $view_modes = $entity_info['view modes'];
  $type_view_mode_settings = field_view_mode_settings('file', $type);

  $return = array();
  foreach ($view_modes as $view_mode_slug => $view_mode) {
    if (isset($type_view_mode_settings[$view_mode_slug])) {
      if ($type_view_mode_settings[$view_mode_slug]['custom_settings'] == TRUE) {
        $return[$view_mode_slug] = $view_mode['label'];
      }
    }
  }

  return $return;
}

/**
 * Returns a render array for rendering a file preview.
 *
 * Treats documents and images different, JG to fill in why.
 */
function ombumedia_render_file_preview($file) {
  $output = array();

  if ($file->type == 'document') {
    $preview = file_view_file($file, 'preview');
    $preview['#prefix'] = '<div>';
    $preview['#suffix'] = '</div>';
    $output = array(
      'preview' => $preview,
      'full' => file_view_file($file, 'full'),
    );
  }
  else {
    $output = file_view_file($file, 'full');
  }

  return $output;
}

/**
 * Returns metadata for a file, depending on type.
 */
function ombumedia_file_get_info($file) {
  $info = array();

  $info[]= array(
    'label' => t('Type'),
    'value' => ucwords($file->type),
  );

  $info[]= array(
    'label' => t('Uploaded'),
    'value' => format_date($file->timestamp, 'custom', 'F j, Y g:i a'),
  );

  if ($file->filesize) {
    $info[] = array(
      'label' => t('Size'),
      'value' => format_size($file->filesize),
    );
  }

  if (isset($file->oembed)) {
    $info[] = array(
      'label' => t('Source'),
      'value' => $file->oembed['provider_name'],
    );
    $info[] = array(
      'label' => t('URL'),
      'value' => l($file->oembed['original_url'], $file->oembed['original_url']),
    );
    if (isset($file->oembed['width'])) {
      $info[] = array(
        'label' => t('Width'),
        'value' => $file->oembed['width']
      );
      $info[] = array(
        'label' => t('Height'),
        'value' => $file->oembed['height']
      );
    }
  }

  if (isset($file->metadata)) {
    if (isset($file->metadata['width'])) {
      $info[] = array(
        'label' => t('Width'),
        'value' => $file->metadata['width']
      );
      $info[] = array(
        'label' => t('Height'),
        'value' => $file->metadata['height']
      );
    }
  }

  $fields = field_info_instances('file', $file->type);
  foreach ($fields as $field) {
    $field_name = $field['field_name'];
    $values = array();
    foreach (field_get_items('file', $file, $field_name) as $field_item) {
      $values[] = render(field_view_value('file', $file, $field_name, $field_item, array()));
    }
    $info[] = array(
      'label' => $field['label'],
      'value' => implode(', ', $values),
    );
  }

  return $info;
}
