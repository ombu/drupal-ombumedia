<?php
/**
 * @file
 * Code for the OMBU Media feature.
 */

include_once 'ombumedia.features.inc';


/**
 * Hooks.
 */

/**
 * Implements hook_menu().
 */
function ombumedia_menu() {
  $items['admin/dashboard/manage-media'] = array(
    'title' => 'Manage Media',
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_magage_media',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['admin/dashboard/select-media'] = array(
    'title' => 'Manage Media',
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_select_media',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['admin/dashboard/ombumedia-test'] = array(
    'title' => 'Test media selection',
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_test',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['admin/dashboard/manage-media/ajax-upload'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'ombumedia_page_magage_media_ajax_upload',
    'access arguments' => array('administer files'),
    'file' => 'ombumedia.pages.inc',
  );

  $items['file/%file/preview'] = array(
    'page callback' => 'ombumedia_page_file_preview',
    'page arguments' => array(1),
    'access callback' => 'file_entity_access',
    'access arguments' => array('view', 1),
    'file' => 'ombumedia.pages.inc',
  );

  $items['file/%file/configure'] = array(
    'page callback' => 'ombumedia_page_file_configure',
    'page arguments' => array(1),
    'access callback' => 'file_entity_access',
    'access arguments' => array('view', 1),
    'file' => 'ombumedia.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function ombumedia_admin_paths() {
  $paths = array(
    'file/*/preview' => TRUE,
    'file/*/configure' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_theme().
 */
function ombumedia_theme($existing, $type, $theme, $path) {
  return array(
    'ombumedia_select' => array(
      'variables' => array(
        'library' => FALSE,
        'upload' => FALSE,
        'web' => FALSE,
      ),
      'template' => 'ombumedia_select',
    ),
    'ombumedia_file_preview' => array(
      'variables' => array(
        'file' => NULL,
      ),
      'template' => 'ombumedia_file_preview',
    ),
    'ombumedia_dialog_page' => array(
      'render element' => 'page',
      'template' => 'ombumedia-dialog-page',
    ),
  );
}

/**
 * Implements hook_library().
 */
function ombumedia_library() {
  $libraries = array();

  $path = drupal_get_path('module', 'ombumedia');

  $libraries['ombumedia'] = array(
    'title' => 'OMBU Media',
    'version' => '0.1',
    'js' => array(
      $path . '/js/ombumedia-util.js' => array(),
      $path . '/js/ombumedia.js' => array(),
      $path . '/js/ombumedia-popup.js' => array(),
      array(
        'type' => 'setting',
        'data' => array(
          'ombumedia' => array(
            'upload' => array(
              'url' => url('admin/dashboard/manage-media/ajax-upload'),
            ),
          ),
        ),
      ),
    ),
    'css' => array(
      $path . '/css/ombumedia.css',
    ),
    'dependencies' => array(
      array('system', 'ui.tabs'),
      array('system', 'ui.dialog'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_page_alter().
 *
 * This is used to use our alternate template when ?render=media-popup is passed
 * in the URL.
 */
function ombumedia_page_alter(&$page) {
  if (isset($_GET['render']) && $_GET['render'] == 'ombumedia-popup') {
    $page['#theme'] = 'ombumedia_dialog_page';

    // Disable administration modules from adding output to the popup.
    // @see http://drupal.org/node/914786
    module_invoke_all('suppress', TRUE);

    foreach (element_children($page) as $key) {
      if ($key != 'content') {
        unset($page[$key]);
      }
    }
  }
}


/**
 * Preprocess.
 */

/**
 * Implements hook_preprocess_ombumedia_file_preview().
 */
function ombumedia_preprocess_ombumedia_file_preview(&$variables) {
  module_load_include('inc', 'file_entity', 'file_entity.pages');
  $file = $variables['file'];

  $variables['title'] = !empty($file->title) ? $file->title : $file->filename;

  if ($file->type == 'document') {
    $preview = file_view_file($file, 'preview');
    $preview['#prefix'] = '<div>';
    $preview['#suffix'] = '</div>';
    $variables['preview'] = array(
      'preview' => $preview,
      'full' => file_view_file($file, 'full'),
    );
  }
  else {
    $variables['preview'] = file_view_file($file, 'full');
  }

  $variables['actions'] = array(
    '#prefix' => '<div class="actions">',
    '#suffix' => '</div>',
    'back' => array(
      '#value' => 'Back',
      '#type' => 'submit',
    ),
    'continue' => array(
      '#value' => 'Select',
      '#type' => 'submit',
      '#attributes' => array(
        'data-href' => url('file/' . $file->fid . '/configure', array('query' => drupal_get_query_parameters())),
      ),
    ),
  );

  $variables['usage'] = array(
    '#theme' => 'fieldset',
    '#title' => t('Usage'),
    '#attributes' => array(
      'class' => array('collapsible', 'collapsed'),
    ),
    '#children' => render(file_entity_usage_page($file)),
  );
  drupal_add_library('system', 'drupal.collapse');
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function ombumedia_preprocess_views_view_unformatted(&$variables) {
  if ($variables['view']->name === 'ombumedia') {
    if ($variables['view']->current_display === 'select_media') {
      $results = $variables['view']->result;
      foreach ($variables['rows'] as $i => $row) {
        $fid = $results[$i]->fid;
        $data_fid = 'data-fid="' . $fid . '"';
        $query = drupal_get_query_parameters() + drupal_get_destination();
        $preview_url = url('file/' . $fid . '/preview', array('query' => $query));
        $row = '<a href="' . $preview_url . '" ' . $data_fid . '>' . $row . '</a>';
        $row .= implode(' ', array(
          '<span class="actions">',
            l('Select', 'file/' . $fid . '/configure', array('query' => $query)),
          '</span>',
        ));
        $variables['rows'][$i] = $row;
        $variables['classes_array'][$i] .= ' ombumedia-library-file';
      }
    }
  }
}

/**
 * Forms.
 */

function ombumedia_file_entity_add($form, &$form_state, array $options = array()) {
  module_load_include('inc', 'file_entity', 'file_entity.pages');

  $form['upload'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload a new file'),
    '#upload_location' => file_entity_upload_destination_uri($options),
    '#upload_validators' => file_entity_get_upload_validators($options),
    '#progress_indicator' => 'bar',
    '#required' => TRUE,
    '#pre_render' => array('file_managed_file_pre_render', 'file_entity_upload_validators_pre_render'),
    '#default_value' => isset($form_state['storage']['upload']) ? $form_state['storage']['upload'] : NULL,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['next'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');

  return $form;
}

function ombumedia_file_entity_add_validate($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);
  $type_candidates = file_entity_get_filetype_candidates($file);
  if (count($type_candidates) == 1) {
    $type_candidates_keys = array_keys($type_candidates);
    $form_state['type'] = reset($type_candidates_keys);
  }
  else {
    form_set_error('upload', t('The type of file uploaded was not recognized.'));
  }
}

function ombumedia_file_entity_add_submit($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);
  $type = $form_state['type'];

  $file->type = $type;
  $file->display = TRUE;
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);

  drupal_set_message(t('@type %name was uploaded.', array('@type' => file_entity_type_get_name($file), '%name' => $file->filename)));

  $form_state['redirect'] = 'file/' . $file->fid . '/configure';
}

function ombumedia_file_entity_configure($form, &$form_state, $fid) {
  $file = file_load($fid);

  $form['#attributes'] = array(
    'class' => array('ombumedia-file-entity-configure'),
  );

  $view_mode_options = ombumedia_file_type_view_modes($file->type);
  if (isset($_GET['view_modes'])) {
    $view_mode_options = array_intersect_key($view_mode_options, array_flip($_GET['view_modes']));
  }
  $view_mode = isset($_GET['view_mode']) ? $_GET['view_mode'] : array_keys($view_mode_options)[0];

  $preview_id = 'ombumedia-configure-preview-' . $file->fid;
  $form['#preview_id'] = $preview_id;
  $form['preview'] = file_view_file($file, $view_mode);
  $form['preview']['#prefix'] = '<div id="' . $preview_id . '">';
  $form['preview']['#suffix'] = '</div>';

  $form['view_mode'] = array(
    '#type' => 'select',
    '#title' => t('View Mode'),
    '#options' => $view_mode_options,
    '#default_value' => $view_mode,
    '#ajax' => array(
      'callback' => 'ombumedia_file_entity_configure_preview_callback',
      'wrapper' => $preview_id,
    ),
  );

  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $file->fid,
  );

  $form['file'] = array(
    '#title' => t('Edit'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'filename' => array(
      '#title' => t('Name'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $file->filename,
      '#weight' => -100,
    ),
  );

  $form['#file'] = $file;
  field_attach_form('file', $file, $form['file'], $form_state);

  unset($form['file']['redirect']);

  $form['actions'] = array(
    '#type' => 'actions',
    '#weight' => 30,
    'back' => array(
      '#value' => 'Back',
      '#type' => 'submit',
    ),
    'continue' => array(
      '#value' => 'Continue',
      '#type' => 'submit',
    ),
  );

  return $form;
}

function ombumedia_file_entity_configure_preview_callback($form, &$form_state) {
  $preview_id = $form['#preview_id'];
  $file = file_load($form_state['values']['fid']);
  $view_mode = $form_state['values']['view_mode'];

  $rendered = '<div id="' . $preview_id . '">' . render(file_view_file($file, $view_mode)) . '</div>';

  $commands = array();
  $commands[] = ajax_command_replace('#' . $preview_id, $rendered);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function ombumedia_file_entity_configure_validate($form, &$form_state) {
  if (isset($form['file']['#entity'])) {
    // Fields were attached.
    $file = $form['file']['#entity'];
    field_attach_form_validate('file', $file, $form['file'], $form_state);
  }
}

function ombumedia_file_entity_configure_submit($form, &$form_state) {
  $file = $form['#file'];
  if (isset($form['file']['#entity'])) {
    // Fields were attached.
    field_attach_submit('file', $file, $form['file'], $form_state);
  }
  $file->filename = $form_state['values']['filename'];
  file_save($file);

  $fid = $file->fid;

  print <<<JS
<script type="text/javascript">
  try {
    window.parent.Drupal.ombumedia.closeDialog();
  }
  catch (e) {}
</script>
JS;
  drupal_exit();
}


/**
 * Utilities.
 */

/**
 * Returns an associative array with the view modes that are enabled for a file
 * type.
 */
function ombumedia_file_type_view_modes($type) {
  $entity_info = entity_get_info('file');
  $view_modes = $entity_info['view modes'];
  $type_view_mode_settings = field_view_mode_settings('file', $type);

  $return = array();
  foreach ($view_modes as $view_mode_slug => $view_mode) {
    if (isset($type_view_mode_settings[$view_mode_slug])) {
      if ($type_view_mode_settings[$view_mode_slug]['custom_settings'] == TRUE) {
        $return[$view_mode_slug] = $view_mode['label'];
      }
    }
  }

  return $return;
}
